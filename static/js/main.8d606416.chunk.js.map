{"version":3,"sources":["modules/layers/actions/index.js","constants/common/index.js","reducers/createReducer.js","modules/layers/reducers/index.js","modules/data/actions/index.js","modules/data/reducers/index.js","constants/status/index.js","modules/models/actions/index.js","modules/models/reducers/index.js","modules/snackBar/actions/index.js","modules/snackBar/reducers/index.js","reducers/index.js","modules/snackBar/selectors/index.js","constants/snackBar/index.js","components/common/SnackBar/index.js","containers/common/SnackBar/index.js","styles.js","components/StartPage/styles.js","components/StartPage/index.js","containers/StartPage/index.js","constants/api/index.js","components/Routes.js","App.js","helpers/data/index.js","constants/data/index.js","modules/models/selectors/index.js","helpers/models/index.js","modules/models/sagas/index.js","sagas/index.js","serviceWorker.js","index.js"],"names":["ADD_LAYERS_PARAMETERS","EMPTY_OBJECT","createReducer","initialState","handlers","state","action","type","layersReducer","parameters","layers","param","assoc","Object","values","FETCH_DATA","FETCH_DATA_SUCCESS","SET_STATUS","setDataStatus","status","dataReducer","data","mergeRight","ADD_MODELS","TRAIN_MODEL","models","SHOW_SNACK_BAR","HIDE_SNACK_BAR","snackBarType","messageText","modalsReducer","always","reducer","combineReducers","snackBar","selectSnackBar","commonMessages","SnackBarComponent","timeout","severity","message","onClose","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","Alert","variant","SnackBar","dispatch","useDispatch","useSelector","useCallback","_","reason","useStyles","makeStyles","wrapper","padding","maxWidth","margin","boxSizing","container","position","display","flexDirection","justifyContent","alignItems","top","bottom","left","right","buttons","width","StartPageComponent","createNN","styles","className","Typography","component","paragraph","Button","color","size","onClick","disabled","StartPage","history","useHistory","push","Routes","console","log","App","fetchMNISTData","img","Image","canvas","document","createElement","ctx","getContext","Promise","resolve","crossOrigin","onload","naturalWidth","height","naturalHeight","datasetBytesBuffer","ArrayBuffer","NUM_MNIST_DATASET_ELEMENTS","i","datasetBytesView","Float32Array","MNIST_IMAGE_SIZE","drawImage","imageData","getImageData","j","length","src","getTrainTestData","trainImages","slice","testImages","getDataBatch","batchSize","testIndices","shuffledTestIndex","initIndex","batch","tidy","nextBatch","reshape","getIndex","batchImagesArray","idx","image","set","tensor2d","selectAutoencoderModel","autoencoder","trainModel","nn","trainData","testData","epochs","fitCallbacks","show","name","fit","validationData","shuffle","callbacks","doPrediction","currentModel","a","preds","predict","examples","numExamples","shape","imageTensor","style","browser","toPixels","clipByValue","appendChild","dispose","trainModelWorker","mainSaga","options","learningOptions","sampleSizes","put","call","select","model","trainIndices","util","createShuffledIndices","train","test","controlData","container1","getElementById","container2","takeLatest","rootSaga","fork","modelsSaga","Boolean","window","location","hostname","match","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8d606416.chunk.js","sourcesContent":["const PREFIX = 'layers';\r\n\r\nexport const ADD_LAYERS_PARAMETERS = `${PREFIX}/ADD_LAYERS_PARAMETERS`;\r\nexport const addLayersParameters = (param) => ({\r\n  type: ADD_LAYERS_PARAMETERS,\r\n  param,\r\n});\r\n","export const EMPTY_ARRAY = [];\r\nexport const EMPTY_OBJECT = {};\r\n","/**\r\n * helps to create reducers like an objects (key is action type, value is action handler)\r\n * It's faster and cleaner than switch approach\r\n * @param initialState\r\n * @param handlers\r\n * @return {function}\r\n */\r\nexport const createReducer = (initialState, handlers) => (\r\n  state = initialState,\r\n  action\r\n) => (handlers[action.type] ? handlers[action.type](state, action) : state);\r\n\r\nexport default createReducer;\r\n","import { ADD_LAYERS_PARAMETERS } from 'modules/layers/actions';\r\nimport { EMPTY_ARRAY, EMPTY_OBJECT } from 'constants/common';\r\nimport { assoc } from 'ramda';\r\nimport createReducer from 'reducers/createReducer';\r\n\r\nconst initialState = {\r\n  parameters: EMPTY_ARRAY,\r\n  layers: EMPTY_OBJECT,\r\n};\r\n\r\nconst layersReducer = createReducer(initialState, {\r\n  [ADD_LAYERS_PARAMETERS]: (state, { param }) =>\r\n    assoc('parameters', Object.values(param), state),\r\n});\r\n\r\nexport default layersReducer;\r\n","const PREFIX = 'data';\r\n\r\nexport const FETCH_DATA = `${PREFIX}/FETCH_DATA`;\r\nexport const fetchData = () => ({\r\n  type: FETCH_DATA,\r\n});\r\n\r\nexport const FETCH_DATA_SUCCESS = `${PREFIX}/FETCH_DATA_SUCCESS`;\r\nexport const fetchDataSuccess = (data) => ({\r\n  type: FETCH_DATA_SUCCESS,\r\n  data,\r\n});\r\n\r\nexport const SET_STATUS = `${PREFIX}/SET_STATUS`;\r\nexport const setDataStatus = (status) => ({\r\n  type: SET_STATUS,\r\n  status,\r\n});\r\n","import createReducer from 'reducers/createReducer';\r\nimport { EMPTY_OBJECT } from 'constants/common';\r\nimport { assoc, mergeRight } from 'ramda';\r\nimport { STATUS_NOT_REQUESTED, STATUS_LOADING } from 'constants/status';\r\nimport {\r\n  FETCH_DATA,\r\n  FETCH_DATA_SUCCESS,\r\n  SET_STATUS,\r\n} from 'modules/data/actions';\r\n\r\nconst initialState = {\r\n  data: EMPTY_OBJECT,\r\n  status: STATUS_NOT_REQUESTED,\r\n};\r\n\r\nconst dataReducer = createReducer(initialState, {\r\n  [SET_STATUS]: (state, { status }) => assoc('status', status, state),\r\n  [FETCH_DATA]: (state) => assoc('status', STATUS_LOADING, state),\r\n  [FETCH_DATA_SUCCESS]: (state, { data }) =>\r\n    mergeRight(state, { status: STATUS_NOT_REQUESTED, data }),\r\n});\r\n\r\nexport default dataReducer;\r\n","export const STATUS_ERROR = 'ERROR';\r\nexport const STATUS_SUCCESS = 'SUCCESS';\r\nexport const STATUS_NOT_REQUESTED = 'NOT_REQUESTED';\r\nexport const STATUS_LOADING = 'LOADING';\r\n","const PREFIX = 'models';\r\n\r\nexport const ADD_MODELS = `${PREFIX}/ADD_MODELS`;\r\nexport const addModels = (models) => ({\r\n  type: ADD_MODELS,\r\n  models,\r\n});\r\n\r\nexport const TRAIN_MODEL = `${PREFIX}/TRAIN_MODEL`;\r\nexport const trainModel = (options) => ({\r\n  type: TRAIN_MODEL,\r\n  options,\r\n});\r\n","import createReducer from 'reducers/createReducer';\r\nimport { EMPTY_OBJECT } from 'constants/common';\r\nimport { ADD_MODELS } from 'modules/models/actions';\r\nimport { assoc } from 'ramda';\r\n\r\nconst initialState = {\r\n  models: EMPTY_OBJECT,\r\n};\r\n\r\nconst dataReducer = createReducer(initialState, {\r\n  [ADD_MODELS]: (state, { models }) => assoc('models', models, state),\r\n});\r\n\r\nexport default dataReducer;\r\n","const PREFIX = 'snackBar';\r\n\r\nexport const SHOW_SNACK_BAR = `${PREFIX}/SHOW_SNACK_BAR`;\r\nexport const showSnackBar = (snackBarType = '', messageText = '') => ({\r\n  type: SHOW_SNACK_BAR,\r\n  snackBarType,\r\n  messageText,\r\n});\r\n\r\nexport const HIDE_SNACK_BAR = `${PREFIX}/HIDE_SNACK_BAR`;\r\nexport const hideSnackBar = () => ({\r\n  type: HIDE_SNACK_BAR,\r\n});\r\n","import createReducer from 'reducers/createReducer';\r\nimport { mergeRight, always } from 'ramda';\r\nimport { SHOW_SNACK_BAR, HIDE_SNACK_BAR } from 'modules/snackBar/actions';\r\n\r\nconst initialState = { snackBarType: '', messageText: '' };\r\n\r\nconst modalsReducer = createReducer(initialState, {\r\n  [SHOW_SNACK_BAR]: (state, { snackBarType = '', messageText = '' }) =>\r\n    mergeRight(state, {\r\n      snackBarType,\r\n      messageText,\r\n    }),\r\n  [HIDE_SNACK_BAR]: always(initialState),\r\n});\r\n\r\nexport default modalsReducer;\r\n","import { combineReducers } from 'redux';\r\nimport layers from 'modules/layers/reducers';\r\nimport data from 'modules/data/reducers';\r\nimport models from 'modules/models/reducers';\r\nimport snackBar from 'modules/snackBar/reducers';\r\n\r\nconst reducer = combineReducers({\r\n  layers,\r\n  data,\r\n  models,\r\n  snackBar,\r\n});\r\n\r\nexport default reducer;\r\n","export const selectSnackBar = (state) => state.snackBar;\r\n","export const SNACK_BAR_ERROR = 'error';\r\nexport const SNACK_BAR_SUCCESS = 'success';\r\n\r\nexport const commonMessages = {\r\n  [SNACK_BAR_ERROR]: 'Something wrong',\r\n  [SNACK_BAR_SUCCESS]: 'Successful',\r\n};\r\n\r\nexport const SNACK_BAR_TIMEOUT = 5000;\r\n","import React from 'react';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nexport const SnackBarComponent = ({ timeout, severity, message, onClose }) => (\r\n  <Snackbar\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'left',\r\n    }}\r\n    open\r\n    autoHideDuration={timeout}\r\n    onClose={onClose}\r\n  >\r\n    <Alert severity={severity} variant=\"filled\" onClose={onClose}>\r\n      {message}\r\n    </Alert>\r\n  </Snackbar>\r\n);\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectSnackBar } from 'modules/snackBar/selectors';\r\nimport { commonMessages, SNACK_BAR_TIMEOUT } from 'constants/snackBar';\r\nimport { SnackBarComponent } from 'components/common/SnackBar';\r\nimport { hideSnackBar } from 'modules/snackBar/actions';\r\n\r\n/**\r\n * SnackBar container.\r\n * Provides brief messages about app processes.\r\n */\r\nexport const SnackBar = () => {\r\n  const dispatch = useDispatch();\r\n  const { snackBarType, messageText } = useSelector(selectSnackBar);\r\n\r\n  // The reason prop is used to ignore click outside SnackBar\r\n  const onClose = useCallback(\r\n    (_, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n      dispatch(hideSnackBar());\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!snackBarType) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <SnackBarComponent\r\n      timeout={SNACK_BAR_TIMEOUT}\r\n      severity={snackBarType}\r\n      message={messageText || commonMessages[snackBarType]}\r\n      onClose={onClose}\r\n    />\r\n  );\r\n};\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n  wrapper: {\r\n    padding: '40px 80px',\r\n  },\r\n  '@media (min-width: 2140px)': {\r\n    wrapper: {\r\n      maxWidth: 1980,\r\n      margin: '40px auto',\r\n      boxSizing: 'border-box',\r\n    },\r\n  },\r\n});\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles({\r\n  container: {\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    top: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  buttons: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '50%',\r\n    justifyContent: 'space-around',\r\n  },\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport { useStyles } from './styles';\r\n\r\nexport const StartPageComponent = ({ createNN }) => {\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Typography variant=\"h3\" component=\"h1\" paragraph>\r\n        Добро пожаловать\r\n      </Typography>\r\n      <div className={styles.buttons}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          onClick={createNN}\r\n        >\r\n          Создать новую нейронную сеть\r\n        </Button>\r\n        <Button variant=\"contained\" size=\"large\" disabled>\r\n          Загрузить готовую нейронную сеть\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nStartPageComponent.propTypes = {\r\n  createNN: PropTypes.func.isRequired,\r\n};\r\n","import React, { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { CREATE_NN_URL } from '../../constants/api';\r\nimport { StartPageComponent } from '../../components/StartPage';\r\n\r\nexport const StartPage = () => {\r\n  const history = useHistory();\r\n  const createNN = useCallback(() => {\r\n    history.push(CREATE_NN_URL);\r\n  }, [history]);\r\n\r\n  return <StartPageComponent createNN={createNN} />;\r\n};\r\n","export const ROOT = '/';\r\nexport const CREATE_NN_URL = '/create';\r\nexport const TRAIN_NN_URL = '/train';\r\nexport const TEST_NN_URL = '/test';\r\nexport const MNIST_DATA_URL =\r\n  'https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png';\r\n","import React from 'react';\r\n// import { Switch, Route } from 'react-router-dom';\r\n// import { TrainNN } from 'containers/TrainNN';\r\n// import {\r\n//   CREATE_NN_URL,\r\n//   TRAIN_NN_URL,\r\n//   TEST_NN_URL,\r\n//   ROOT,\r\n// } from '../constants/api';\r\n// import { CreateNN } from '../containers/CreateNN';\r\n// import { TestNNComponent } from './TestNNComponent';\r\nimport { StartPage } from '../containers/StartPage';\r\n\r\nexport const Routes = () => {\r\n  console.log(123);\r\n  return (\r\n    <StartPage />\r\n    // <Switch>\r\n    //   <Route path={ROOT} exact component={StartPage} />\r\n    //   <Route path={CREATE_NN_URL} exact component={CreateNN} />\r\n    //   <Route path={TRAIN_NN_URL} exact component={TrainNN} />\r\n    //   <Route path={TEST_NN_URL} exact component={TestNNComponent} />\r\n    // </Switch>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { SnackBar } from 'containers/common/SnackBar';\r\nimport { useStyles } from './styles';\r\nimport { Routes } from './components/Routes';\r\n\r\nfunction App() {\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <SnackBar />\r\n      <div className={styles.wrapper}>\r\n        <BrowserRouter>\r\n          <Routes />\r\n        </BrowserRouter>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { MNIST_DATA_URL } from 'constants/api';\r\nimport {\r\n  MNIST_IMAGE_SIZE,\r\n  NUM_MNIST_DATASET_ELEMENTS,\r\n  NUM_MNIST_TRAIN_ELEMENTS,\r\n  NUM_MNIST_TEST_ELEMENTS,\r\n} from 'constants/data';\r\nimport { util, tensor2d, tidy } from '@tensorflow/tfjs';\r\n\r\nexport const fetchMNISTData = () => {\r\n  const img = new Image();\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n  return new Promise((resolve) => {\r\n    img.crossOrigin = '';\r\n    img.onload = () => {\r\n      img.width = img.naturalWidth;\r\n      img.height = img.naturalHeight;\r\n\r\n      const datasetBytesBuffer = new ArrayBuffer(\r\n        NUM_MNIST_DATASET_ELEMENTS * MNIST_IMAGE_SIZE * 4\r\n      );\r\n\r\n      const chunkSize = 5000;\r\n      canvas.width = img.width;\r\n      canvas.height = chunkSize;\r\n\r\n      for (let i = 0; i < NUM_MNIST_DATASET_ELEMENTS / chunkSize; i += 1) {\r\n        const datasetBytesView = new Float32Array(\r\n          datasetBytesBuffer,\r\n          i * MNIST_IMAGE_SIZE * chunkSize * 4,\r\n          MNIST_IMAGE_SIZE * chunkSize\r\n        );\r\n        ctx.drawImage(\r\n          img,\r\n          0,\r\n          i * chunkSize,\r\n          img.width,\r\n          chunkSize,\r\n          0,\r\n          0,\r\n          img.width,\r\n          chunkSize\r\n        );\r\n\r\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n        for (let j = 0; j < imageData.data.length / 4; j += 1) {\r\n          // All channels hold an equal value since the image is grayscale, so\r\n          // just read the red channel.\r\n          datasetBytesView[j] = imageData.data[j * 4] / 255;\r\n        }\r\n      }\r\n      // this.datasetImages = new Float32Array(datasetBytesBuffer);\r\n\r\n      resolve(new Float32Array(datasetBytesBuffer));\r\n    };\r\n    img.src = MNIST_DATA_URL;\r\n  });\r\n};\r\n\r\n/**\r\n * Create shuffled indices into the train/test set for when we select a\r\n * random dataset element for training / validation.\r\n */\r\nexport const getIndices = () => {\r\n  const trainIndices = util.createShuffledIndices(NUM_MNIST_TRAIN_ELEMENTS);\r\n  const testIndices = util.createShuffledIndices(NUM_MNIST_TEST_ELEMENTS);\r\n  return { trainIndices, testIndices };\r\n};\r\n\r\n/**\r\n * Slice the the images and labels into train and test sets.\r\n */\r\nexport const getTrainTestData = (data) => {\r\n  const trainImages = data.slice(\r\n    0,\r\n    MNIST_IMAGE_SIZE * NUM_MNIST_TRAIN_ELEMENTS\r\n  );\r\n  const testImages = data.slice(MNIST_IMAGE_SIZE * NUM_MNIST_TRAIN_ELEMENTS);\r\n  return { trainImages, testImages };\r\n};\r\n\r\nexport const getDataBatch = ({\r\n  batchSize,\r\n  testImages,\r\n  testIndices,\r\n  initIndex,\r\n}) => {\r\n  let shuffledTestIndex = initIndex;\r\n  const dataBatch = tidy(() => {\r\n    const data = nextBatch(+batchSize, testImages, () => {\r\n      shuffledTestIndex = (shuffledTestIndex + 1) % testIndices.length;\r\n      return testIndices[shuffledTestIndex];\r\n    });\r\n    return data.reshape([+batchSize, 28, 28, 1]);\r\n  });\r\n  return {\r\n    batch: dataBatch,\r\n    shuffledTestIndex,\r\n  };\r\n};\r\n\r\nconst nextBatch = (batchSize, data, getIndex) => {\r\n  const batchImagesArray = new Float32Array(batchSize * MNIST_IMAGE_SIZE);\r\n\r\n  for (let i = 0; i < batchSize; i += 1) {\r\n    const idx = getIndex();\r\n    const image = data.slice(\r\n      idx * MNIST_IMAGE_SIZE,\r\n      idx * MNIST_IMAGE_SIZE + MNIST_IMAGE_SIZE\r\n    );\r\n    batchImagesArray.set(image, i * MNIST_IMAGE_SIZE);\r\n  }\r\n  return tensor2d(batchImagesArray, [batchSize, MNIST_IMAGE_SIZE]);\r\n};\r\n","export const MNIST_IMAGE_SIZE = 784;\r\n\r\nexport const NUM_MNIST_DATASET_ELEMENTS = 65000;\r\n\r\nexport const NUM_MNIST_TRAIN_ELEMENTS = 55000;\r\nexport const NUM_MNIST_TEST_ELEMENTS =\r\n  NUM_MNIST_DATASET_ELEMENTS - NUM_MNIST_TRAIN_ELEMENTS;\r\n","export const selectAutoencoderModel = ({ models }) => models.models.autoencoder;\r\n","import { layers, input, model, tidy, browser } from '@tensorflow/tfjs';\r\nimport { show } from '@tensorflow/tfjs-vis';\r\n\r\nexport const createEncoder = (layersOptions) => {\r\n  const inputLayer = input({ shape: [28, 28, 1] });\r\n  const flattenImg = layers.flatten().apply(inputLayer);\r\n  const stackOfLayers = createStackOfLayers(\r\n    flattenImg,\r\n    layersOptions,\r\n    0,\r\n    (index) => index + 1\r\n  );\r\n  const encoder = model({\r\n    inputs: inputLayer,\r\n    outputs: stackOfLayers,\r\n    name: 'encoder',\r\n  });\r\n  return { inputLayer, encoder };\r\n};\r\n\r\nexport const createDecoder = (layersOptions) => {\r\n  const lastIndex = layersOptions.length - 1;\r\n  const inputLayer = input({ shape: Number(layersOptions[lastIndex].units) });\r\n  const stackOfLayers = createStackOfLayers(\r\n    inputLayer,\r\n    layersOptions,\r\n    lastIndex - 1,\r\n    (index) => index - 1\r\n  );\r\n  const flattenDecoded = layers\r\n    .dense({ units: 28 * 28, activation: 'relu' })\r\n    .apply(stackOfLayers);\r\n  const decoderLayers = layers\r\n    .reshape({ targetShape: [28, 28, 1] })\r\n    .apply(flattenDecoded);\r\n  const decoder = model({\r\n    inputs: inputLayer,\r\n    outputs: decoderLayers,\r\n    name: 'decoder',\r\n  });\r\n  return { decoder, inputLayer };\r\n};\r\n\r\nexport const createAutoencoder = (layersOptions) => {\r\n  const { encoder, inputLayer } = createEncoder(layersOptions);\r\n  const { decoder } = createDecoder(layersOptions);\r\n  const autoencoder = model({\r\n    inputs: inputLayer,\r\n    outputs: decoder.apply(encoder.apply(inputLayer)),\r\n    name: 'autoencoder',\r\n  });\r\n  console.log('encoder');\r\n  encoder.compile({ optimizer: 'adam', loss: 'binaryCrossentropy' });\r\n  encoder.summary();\r\n  console.log('decoder');\r\n  decoder.compile({ optimizer: 'adam', loss: 'binaryCrossentropy' });\r\n  decoder.summary();\r\n  console.log('autoencoder');\r\n  autoencoder.compile({ optimizer: 'adam', loss: 'binaryCrossentropy' });\r\n  autoencoder.summary();\r\n  return { autoencoder, encoder, decoder };\r\n};\r\n\r\nexport const createDenseLayer = ({ units, act }) =>\r\n  layers.dense({ units: Number(units), activation: act });\r\n\r\nexport const createStackOfLayers = (\r\n  inputLayer,\r\n  layersOptions,\r\n  index,\r\n  getNewIndex\r\n) => {\r\n  const layerOptions = layersOptions[index];\r\n  if (layerOptions && Object.values(layerOptions).length) {\r\n    const layer = createDenseLayer(layerOptions).apply(inputLayer);\r\n    const newIndex = getNewIndex(index);\r\n    return createStackOfLayers(layer, layersOptions, newIndex, getNewIndex);\r\n  }\r\n  return inputLayer;\r\n};\r\n\r\nexport const trainModel = ({ nn, trainData, testData, epochs, batchSize }) => {\r\n  const metrics = ['loss', 'val_loss', 'acc', 'val_acc'];\r\n  const container = { name: 'Model Training' };\r\n  const fitCallbacks = show.fitCallbacks(container, metrics);\r\n\r\n  return nn.fit(trainData, trainData, {\r\n    batchSize,\r\n    validationData: [testData, testData],\r\n    epochs,\r\n    shuffle: true,\r\n    callbacks: fitCallbacks,\r\n    // callbacks: {\r\n    //   onEpochEnd: (epoch, log) => {\r\n    //     console.log('epoch', epoch, 'log', log);\r\n    //   },\r\n    // },\r\n  });\r\n};\r\n\r\nexport async function doPrediction(currentModel, data) {\r\n  const preds = currentModel.predict(data);\r\n  return preds;\r\n}\r\n\r\nexport async function display(examples, container) {\r\n  // Количество изображений, которое нужно вывести на экран\r\n  const numExamples = examples.shape[0];\r\n  // Create a canvas element to render each example\r\n  for (let i = 0; i < numExamples; i += 1) {\r\n    const imageTensor = tidy(() =>\r\n      // Reshape the image to 28x28 px\r\n      examples.slice([i, 0], [1, examples.shape[1]]).reshape([28, 28, 1])\r\n    );\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 28;\r\n    canvas.height = 28;\r\n    canvas.style = 'margin: 4px;';\r\n    // eslint-disable-next-line\r\n    await browser.toPixels(imageTensor.clipByValue(0, 1), canvas);\r\n    container.appendChild(canvas);\r\n\r\n    imageTensor.dispose();\r\n  }\r\n}\r\n","import { TRAIN_MODEL } from 'modules/models/actions';\r\nimport { setDataStatus } from 'modules/data/actions';\r\nimport { call, takeLatest, put, select } from 'redux-saga/effects';\r\nimport {\r\n  fetchMNISTData,\r\n  getIndices,\r\n  getTrainTestData,\r\n  getDataBatch,\r\n} from 'helpers/data';\r\nimport { STATUS_LOADING, STATUS_NOT_REQUESTED } from 'constants/status';\r\nimport { selectAutoencoderModel } from 'modules/models/selectors';\r\nimport { trainModel, doPrediction, display } from 'helpers/models';\r\n\r\n/**\r\n * Использовать статус у данных, а не модели\r\n */\r\nfunction* trainModelWorker({ options }) {\r\n  const { learningOptions, sampleSizes } = options;\r\n  yield put(setDataStatus(STATUS_LOADING));\r\n  const data = yield call(fetchMNISTData);\r\n  yield put(setDataStatus(STATUS_NOT_REQUESTED));\r\n  const model = yield select(selectAutoencoderModel);\r\n  const { trainIndices, testIndices } = getIndices();\r\n  const { trainImages, testImages } = getTrainTestData(data);\r\n  const { batch: trainData } = getDataBatch({\r\n    batchSize: sampleSizes.train,\r\n    testImages: trainImages,\r\n    testIndices: trainIndices,\r\n    initIndex: 0,\r\n  });\r\n  const { batch: testData, shuffledTestIndex } = getDataBatch({\r\n    batchSize: sampleSizes.test,\r\n    testImages,\r\n    testIndices,\r\n    initIndex: 0,\r\n  });\r\n  yield call(trainModel, {\r\n    nn: model,\r\n    trainData,\r\n    testData,\r\n    batchSize: +learningOptions.batchSize,\r\n    epochs: +learningOptions.epochs,\r\n  });\r\n  const { batch: controlData } = getDataBatch({\r\n    batchSize: 10,\r\n    testImages,\r\n    testIndices,\r\n    initIndex: shuffledTestIndex,\r\n  });\r\n  const container1 = document.getElementById('initImage');\r\n  const container2 = document.getElementById('predsImage');\r\n  const preds = yield call(doPrediction, model, controlData);\r\n  yield call(display, controlData, container1);\r\n  yield call(display, preds, container2);\r\n}\r\n\r\nexport default function* mainSaga() {\r\n  yield takeLatest(TRAIN_MODEL, trainModelWorker);\r\n}\r\n","import { fork } from 'redux-saga/effects';\r\nimport modelsSaga from 'modules/models/sagas';\r\n\r\n/**\r\n * Root saga watcher. Launches all saga watchers\r\n */\r\nexport default function* rootSaga() {\r\n  yield fork(modelsSaga);\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport reducer from 'reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport App from 'App';\r\nimport rootSaga from 'sagas';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}